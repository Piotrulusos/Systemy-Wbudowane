
// PIC24FJ128GA010 Configuration Bit Settings

// 'C' source line config statements

// CONFIG2
#pragma config POSCMOD = XT             // Primary Oscillator Select (XT Oscillator mode selected)
#pragma config OSCIOFNC = ON            // Primary Oscillator Output Function (OSC2/CLKO/RC15 functions as port I/O (RC15))
#pragma config FCKSM = CSDCMD           // Clock Switching and Monitor (Clock switching and Fail-Safe Clock Monitor are disabled)
#pragma config FNOSC = PRI              // Oscillator Select (Primary Oscillator (XT, HS, EC))
#pragma config IESO = ON                // Internal External Switch Over Mode (IESO mode (Two-Speed Start-up) enabled)

// CONFIG1
#pragma config WDTPS = PS32768          // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128            // WDT Prescaler (Prescaler ratio of 1:128)
#pragma config WINDIS = ON              // Watchdog Timer Window (Standard Watchdog Timer enabled,(Windowed-mode is disabled))
#pragma config FWDTEN = ON              // Watchdog Timer Enable (Watchdog Timer is enabled)
#pragma config ICS = PGx2               // Comm Channel Select (Emulator/debugger uses EMUC2/EMUD2)
#pragma config GWRP = OFF               // General Code Segment Write Protect (Writes to program memory are allowed)
#pragma config GCP = OFF                // General Code Segment Code Protect (Code protection is disabled)
#pragma config JTAGEN = OFF             // JTAG Port Enable (JTAG port is disabled)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdio.h>
#include "lcd.h"
#include "buttons.h"
#include "string.h"

// Stałe i zmienne globalne
const char* moce[] = {"800W", "600W", "350W", "200W"};
int mocIndex = 0;
int czasSekundy = 0;
int running = 0; // 0 = zatrzymane, 1 = gotowanie

void system_init(void){
    LCD_Initialize();
    TRISA = 0x0000;
    BUTTON_Enable(BUTTON_S6); // RB4 dodanie 1 minuty
    BUTTON_Enable(BUTTON_S3); // RB3 dodanie 10 sekund
    BUTTON_Enable(BUTTON_S4); // RB5 wybór mocy
    BUTTON_Enable(BUTTON_S5); // RB2 Start/Stop
}

void display_start_screen(void){
    
    LCD_ClearScreen();
    LCD_PutString("DZIEN DOBRY", 11);
    LCD_PutChar('\n');
    LCD_PutString("MIKROFALA 1.0", 13);
   
}

void wyswietlStatus(void){
    LCD_ClearScreen();
    
    LCD_PutString("Moc: ", 5);
    LCD_PutString(moce[mocIndex], strlen(moce[mocIndex]));
    LCD_PutChar('\n');

    char buffer[16];
    int minuty = czasSekundy / 60;
    int sekundy = czasSekundy % 60;
    sprintf(buffer, "Czas: %02d:%02d", minuty, sekundy);
    LCD_PutString(buffer, strlen(buffer));
}

void reset(void){
    mocIndex = 0;
    czasSekundy = 0;
    running = 0;
    LATA = 0x0000;
    wyswietlStatus();
}

void gotowanie(void){
    while (czasSekundy > 0 && running) {
        __delay32(4000000); 
        czasSekundy--;

        wyswietlStatus();

        
        if (BUTTON_IsPressed(BUTTON_S5)) {
            running = 0;
            LCD_ClearScreen();
            LCD_PutChar('\n');
            LCD_PutString("PAUZA", 5);
            while(BUTTON_IsPressed(BUTTON_S5));
            return;
        }
    }

    
    if (czasSekundy == 0) {
        LCD_ClearScreen();
        LCD_PutString("KONIEC", 6);
        while(1) {
            LATA = 0xFFFF;
            __delay32(1000000);
            LATA = 0x0000;
            __delay32(1000000);
        }
    }
}


void mainLoop(void){
    wyswietlStatus();

    while (1) {
        if (BUTTON_IsPressed(BUTTON_S4)) {
            mocIndex = (mocIndex + 1) % 4;
            wyswietlStatus();
            __delay32(300000);
            while(BUTTON_IsPressed(BUTTON_S4));
        }

        if (BUTTON_IsPressed(BUTTON_S6)) {
            czasSekundy += 60;
            wyswietlStatus();
            __delay32(300000);
            while(BUTTON_IsPressed(BUTTON_S6));
        }

        if (BUTTON_IsPressed(BUTTON_S3)) {
            czasSekundy += 10;
            wyswietlStatus();
            __delay32(300000);
            while(BUTTON_IsPressed(BUTTON_S3));
        }

        if (BUTTON_IsPressed(BUTTON_S5)) {
            if (czasSekundy > 0) {
                running = 1;
                gotowanie();
            }
            while(BUTTON_IsPressed(BUTTON_S5));
        }

    }
}

int main(void){
    system_init();
    display_start_screen();
    
    while (
        !BUTTON_IsPressed(BUTTON_S3) &&
        !BUTTON_IsPressed(BUTTON_S4) &&
        !BUTTON_IsPressed(BUTTON_S5) &&
        !BUTTON_IsPressed(BUTTON_S6)
    );
    
    while (
        BUTTON_IsPressed(BUTTON_S3) ||
        BUTTON_IsPressed(BUTTON_S4) ||
        BUTTON_IsPressed(BUTTON_S5) ||
        BUTTON_IsPressed(BUTTON_S6)
    );
    
    mainLoop();
    return 0;
}
